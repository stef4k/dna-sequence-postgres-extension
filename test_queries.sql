DROP EXTENSION IF EXISTS dna_sequence;
CREATE EXTENSION dna_sequence;

/*
=======================
INPUT/OUTPUT FUNCTIONS
=======================
*/
-- **** DNA SEQUENCE ****
SELECT 	DNA_SEQUENCE('ACAAAGTGGTAAATTAGTGTAAGATAGTGGTATTAGATGATGGATTAGATGA'),
		LENGTH(DNA_SEQUENCE('ACAAAGTGGTAAATTAGTGTAAGATAGTGGTATTAGATGATGGATTAGATGA'))
FROM 	DNAS D
LIMIT 1;

-- INVALID SEQUENCE
SELECT 	DNA_SEQUENCE('ACAAAGTGGTAAATTAGTGTAAGATAGTGGTATTAGAFGATGGATTAGATGA'),
		LENGTH(DNA_SEQUENCE('ACAAAGTGGTAAATTAGTGTAAGATAGTGGFATTAGATGATGGATTAGATGA'))
FROM 	DNAS D
LIMIT 1;

-- **** KMER SEQUENCE ****
SELECT 	KMER('ACAAAGTGGTAAATTAGTGTAAATGGATAATT'),
		LENGTH(KMER('ACAAAGTGGTAAATTAGTGTAAATGGATAATT'))
FROM 	KMERS K
LIMIT 1;

-- INVALID LENGTH
SELECT 	KMER('ACAAAGTGGTAAATTAGTGTAAATGGATAATTA'),
		LENGTH(KMER('ACAAAGTGGTAAATTAGTGTAAATGGATAATTA'))
FROM 	KMERS K
LIMIT 1;

-- INVALID CHARACTERS
SELECT 	KMER('ACAAAGTGGTAAATTAGTGTAAATGGATTFS'),
		LENGTH(KMER('ACAAAGTGGTAAATTAGTGTAAATGGAATDF'))
FROM 	KMERS K
LIMIT 1;

-- **** QKMER SEQUENCE ****
SELECT 	QKMER('ACAAABTGRTSACDVTTGWHAKYMNARTATAR'),
		LENGTH(QKMER('ACAAABTGRTSACDVTTGWHAKYMNARTATAR'))
FROM 	QKMERS Q
LIMIT 1;

SELECT 	QKMER('ACAAABTGRTSACDVTTGWHAKYMnrARTAR'),
		LENGTH(QKMER('ACAAABTGRTSACDVTTGWHAKYMnrARTAR'))
FROM 	QKMERS Q
LIMIT 1;

-- INVALID LENGTH
SELECT 	KMER('ACAAAGTGGTSAAATTAWAATYGGAVTATATTA'),
		LENGTH(KMER('ACAAAGTGGTSAAATTAWAATYGGAVTATATTA'))
FROM 	QKMERS Q
LIMIT 1;

-- INVALID CHARACTERS
SELECT 	QKMER('ACAAAGTGGTSAAATTAWAATYGGPVTATATT'),
		LENGTH(QKMER('ACAAAGTGGTSAAATTAWAATYGGPVTATATT'))
FROM 	QKMERS Q
LIMIT 1;


/*
=======================
Length Functions
=======================
*/
SELECT	D.*, 
		LENGTH(D.DNA_SEQUENCE) AS SEQ_LENGTH,
		LENGTH(D.DNA_SEQUENCE) + 32 AS SEQ_32
FROM	DNAS D 
LIMIT 5;

SELECT	K.*, 
		LENGTH(K.KMER) AS SEQ_LENGTH,
		LENGTH(K.KMER) + 32 AS SEQ_32
FROM	KMERS K 
LIMIT 5;

SELECT	Q.*, 
		LENGTH(Q.QKMER) AS SEQ_LENGTH,
		LENGTH(Q.QKMER) + 32 AS SEQ_32
FROM	QKMERS Q
LIMIT 5;

/*
=======================
Equality Functions
=======================
*/
SELECT 	K1.KMER KMER_1, 
		K2.KMER KMER_2,
		(K1.KMER = K2.KMER) ARE_EQUAL, 
		(K1.KMER <> K2.KMER) ARE_NOT_EQUAL
FROM KMERS K1, KMERS K2
LIMIT 5;

SELECT * FROM DNAS LIMIT 1;

/*
=======================
KMER Generation
=======================
*/
SELECT 	*
FROM 	GENERATE_KMERS((SELECT * FROM DNAS LIMIT 1), 32);

-- Over the length of allowed KMERs
SELECT 	*
FROM 	GENERATE_KMERS((SELECT * FROM DNAS LIMIT 1), 33);

-- OVER THE LENGTH OF THE DNA_SEQUENCE
SELECT 	*
FROM 	GENERATE_KMERS((SELECT * FROM DNAS LIMIT 1), 300);


/*
=======================
Starts With Function
=======================
*/

-- Find all Kmers that start with "ATTCT"
SELECT *
FROM KMERS
WHERE KMER^@'ATTCT'; --Implicit Kmer casting

-- Find all Kmers that compose ATTCTATAGTGTA
SELECT *
FROM KMERS
WHERE 'ATTCTATAGTGTA'^@KMER

SELECT *
FROM KMERS 
WHERE 

/*
=======================
Contains Function
=======================
*/
SELECT *
FROM QKMERS
WHERE 'ATTCTATAGTGTA' <@ QKMER
LIMIT 5;

SELECT *, QKMER @> 'AAATGTTCATA', 'AAATGTTCATA' <@ QKMER
FROM QKMERS
LIMIT 5;

SELECT *, CONTAINS(QKMER, 'cata'), 'CATA' <@ QKMER
FROM QKMERS
LIMIT 5;

/*
=======================
Canonical Function
=======================
*/
SELECT 	KMER, 
		CANONICAL(KMER) AS CANONICAL_KMER
FROM 	KMERS K
LIMIT 5;

-- KMERS where their Canonical Kmer is lexicographically larger than the original
SELECT KMER, CANONICAL(KMER)
FROM KMERS K
WHERE CANONICAL(KMER) = KMER
LIMIT 5;
